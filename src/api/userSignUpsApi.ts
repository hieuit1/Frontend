import moment from "moment";

/**
 * Interface ƒë·ªãnh nghƒ©a d·ªØ li·ªáu ng∆∞·ªùi d√πng.
 */
export interface User {
  id: number;
  name: string;
  email: string;
  numberphone: string;  // üÜï Th√™m s·ªë ƒëi·ªán tho·∫°i
  role: string;         // üÜï Th√™m vai tr√≤
  registeredAt: string;
  method?: "Google" | "T√†i kho·∫£n";
  password?: string;
  updatedAt?: string;
  isEnabled: boolean;   // üÜï Th√™m tr·∫°ng th√°i t√†i kho·∫£n
}


const API_URL = `${process.env.REACT_APP_API_URL}/manager-user`; 

/**
 * L·∫•y token t·ª´ localStorage
 */
const getToken = () => localStorage.getItem("token");

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng.
 */
export const fetchUsers = async (): Promise<User[]> => {
  const token = getToken();
  const response = await fetch(API_URL, {
    headers: { Authorization: `Bearer ${token}` }
  });

  if (!response.ok) {
    throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng");
  }
  return await response.json();
};

/**
 * X√≥a 1 ng∆∞·ªùi d√πng theo ID.
 */
export const deleteUser = async (id: number): Promise<void> => {
  const token = getToken();
  const response = await fetch(`${API_URL}/${id}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` }
  });

  if (!response.ok) {
    throw new Error(`X√≥a ng∆∞·ªùi d√πng th·∫•t b·∫°i (ID: ${id})`);
  }
};

/**
 * X√≥a h√†ng lo·∫°t ng∆∞·ªùi d√πng theo danh s√°ch ID.
 */
export const bulkDeleteUsers = async (ids: number[]): Promise<void> => {
  const token = getToken();
  await Promise.all(
    ids.map((id) =>
      fetch(`${API_URL}/${id}`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` }
      }).then((res) => {
        if (!res.ok) throw new Error(`X√≥a ng∆∞·ªùi d√πng th·∫•t b·∫°i (ID: ${id})`);
      })
    )
  );
};

/**
 * C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng.
 */
export const updateUser = async (
  id: number,
  values: Partial<User>
): Promise<User> => {
  const token = getToken();
  const response = await fetch(`${API_URL}/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`
    },
    body: JSON.stringify({
      ...values,
      updatedAt: moment().format("YYYY-MM-DD HH:mm:ss"),
    }),
  });

  if (!response.ok) {
    throw new Error("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th·∫•t b·∫°i");
  }

  return await response.json();
};
