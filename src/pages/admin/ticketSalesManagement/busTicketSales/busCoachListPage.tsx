import React, { useEffect, useState } from "react";
import { Table, Input, Button, Popconfirm, message, Modal, Form } from "antd";
import { fetchCoaches, fetchCoachById, updateCoach, deleteCoach } from "../../../../api/busCoachApi";

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho xe kh√°ch
type Coach = {
  coachId: number;
  coachName: string;
  licensePlateNumberCoach: string;
  url?: string;
};

const BusCoachListPage: React.FC = () => {
  const [coaches, setCoaches] = useState<Coach[]>([]);
  const [search, setSearch] = useState("");
  const [loading, setLoading] = useState(false);
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [editingCoach, setEditingCoach] = useState<Coach | null>(null);
  const [fileList, setFileList] = useState<FileList | null>(null);
  const [form] = Form.useForm();

  useEffect(() => {
    loadCoaches();
  }, []);

  useEffect(() => {
  if (editingCoach) {
    console.log("üõ† D·ªØ li·ªáu xe kh√°ch c·∫ßn s·ª≠a:", editingCoach);
    setEditModalVisible(true);  // ‚úÖ ƒê·∫£m b·∫£o m·ªü modal khi c√≥ d·ªØ li·ªáu
  }
}, [editingCoach]);

  const loadCoaches = async () => {
    setLoading(true);
    try {
      const data: Coach[] = await fetchCoaches();
      setCoaches(data);
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch xe kh√°ch");
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: number) => {
    try {
      await deleteCoach(id);
      setCoaches((prev) => prev.filter((coach) => coach.coachId !== id));
      message.success("ƒê√£ x√≥a xe kh√°ch th√†nh c√¥ng!");
    } catch {
      message.error("X√≥a xe kh√°ch th·∫•t b·∫°i");
    }
  };

  const handleEdit = async (id: number) => {
    try {
      const coachData = await fetchCoachById(id);
      if (!coachData) {
        message.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin xe kh√°ch!");
        return;
      }
      setEditingCoach(coachData);
      setEditModalVisible(true);
      form.setFieldsValue(coachData);
    } catch {
      message.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin xe kh√°ch");
    }
  };

  const handleEditOk = async (values: { coachName: string; licensePlateNumberCoach: string }) => {
  if (!editingCoach) {
    message.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t v√¨ d·ªØ li·ªáu xe kh√°ch kh√¥ng t·ªìn t·∫°i!");
    return;
  }

const file = fileList && fileList.length > 0 ? fileList[0] : undefined;

  console.log("üì° D·ªØ li·ªáu g·ª≠i API:", values, "·∫¢nh:", file);

  try {
    await updateCoach(editingCoach.coachId, values, file); // ‚úÖ G·ª≠i ·∫£nh k√®m d·ªØ li·ªáu c·∫≠p nh·∫≠t
    message.success("C·∫≠p nh·∫≠t xe kh√°ch th√†nh c√¥ng!");
    setEditModalVisible(false);
    loadCoaches();
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", error);
    message.error("C·∫≠p nh·∫≠t xe kh√°ch th·∫•t b·∫°i!");
  }
};




  const filteredCoaches = coaches.filter((coach) =>
    [coach.coachName, coach.licensePlateNumberCoach].some((field) =>
      field?.toLowerCase().includes(search.toLowerCase())
    )
  );

  return (
    <div className="p-8 bg-white shadow rounded max-w-7xl mx-auto">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-semibold">Danh s√°ch xe & bi·ªÉn s·ªë</h2>
        <Button type="primary" onClick={loadCoaches} className="bg-red-500">
          T·∫£i l·∫°i danh s√°ch xe kh√°ch
        </Button>
      </div>

      <Input
        placeholder="T√¨m ki·∫øm theo t√™n ho·∫∑c bi·ªÉn s·ªë..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        style={{ marginBottom: 16, width: 300 }}
      />

      <Table
        loading={loading}
        dataSource={filteredCoaches}
        rowKey="coachId"
        columns={[
          { title: "ID", dataIndex: "coachId", key: "coachId" },
          { title: "T√™n Xe", dataIndex: "coachName", key: "coachName" },
          { title: "Bi·ªÉn S·ªë", dataIndex: "licensePlateNumberCoach", key: "licensePlateNumberCoach" },
          { title: "H√¨nh ·∫¢nh", dataIndex: "url", key: "url", render: (url) => <img src={url} alt="coach" width={50} /> },
          {
            title: "Thao t√°c",
            key: "action",
            render: (_, record) => (
              <div style={{ display: "flex", gap: 8 }}>
                <Button size="small" onClick={() => handleEdit(record.coachId)}>S·ª≠a</Button>
                <Popconfirm title="X√≥a xe kh√°ch?" onConfirm={() => handleDelete(record.coachId)} okText="X√≥a" cancelText="H·ªßy">
                  <Button danger size="small">X√≥a</Button>
                </Popconfirm>
              </div>
            ),
          },
        ]}
      />

      <Modal
        title="C·∫≠p nh·∫≠t xe kh√°ch"
        open={editModalVisible}
        onCancel={() => setEditModalVisible(false)}
        footer={null}
        destroyOnClose
      >
        <Form form={form} onFinish={handleEditOk} layout="vertical">
  <Form.Item name="coachName" label="T√™n xe kh√°ch" rules={[{ required: true }]}>
    <Input />
  </Form.Item>
  <Form.Item name="licensePlateNumberCoach" label="Bi·ªÉn s·ªë xe" rules={[{ required: true }]}>
    <Input />
  </Form.Item>
  <Form.Item label="Ch·ªçn ·∫£nh m·ªõi">
    <Input type="file" onChange={(e) => setFileList(e.target.files)} />
  </Form.Item> 
  <Button type="primary" htmlType="submit" block>C·∫≠p nh·∫≠t</Button>
</Form>

      </Modal>
    </div>
  );
};

export { BusCoachListPage };
